name: tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      is_release:
        description: "Set to true if a release version."
        required: false
        default: false
        type: boolean
      sha:
        description: "The git SHA to use for release.  Only set if needing to publish"
        required: false
        default: ""
        type: string
      version:
        description: "The Release version.  Allowed format: x.y.z"
        required: false
        default: ""
        type: string
      cxx_change:
        description: "The PR number or SHA if wanting to build against a PR/SHA in the C++ SDK"
        required: false
        type: string
      prebuilds_run_id:
        description: "The workflow run ID of a prebuilds workflow run.  Set if wanting to use prebuilds from an already completed run."
        required: false
        default: ""
        type: string
      test_input:
        description: "JSON formatted object representing test input."
        required: false
        default: ""
        type: string
  workflow_call:
    inputs:
      is_release:
        description: "Set to true if a release version."
        required: false
        default: false
        type: boolean
      sha:
        description: "The git SHA to use for release.  Only set if needing to publish"
        required: false
        default: ""
        type: string
      version:
        description: "The Release version.  Allowed format: x.y.z"
        required: false
        default: ""
        type: string
      cxx_change:
        description: "The PR number or SHA if wanting to build against a PR/SHA in the C++ SDK"
        required: false
        type: string
      prebuilds_run_id:
        description: "The workflow run ID of a prebuilds workflow run.  Set if wanting to use prebuilds from an already completed run."
        required: false
        default: ""
        type: string
      test_input:
        description: "JSON formatted object representing test input."
        required: false
        default: ""
        type: string

env:
  DEFAULT_NODE: "18"

jobs:
  validate-input:
    runs-on: ubuntu-22.04
    steps:
      - name: If release, verify SHA is provided
        if: inputs.is_release && inputs.sha == ''
        run: |
          echo "::error If releasing, must provide a SHA."
          exit 1
      - name: If release, verify SHA is correct length
        if: inputs.is_release && inputs.sha != ''
        run: |
          echo '"${{ inputs.sha }}"' | jq -e '. | length == 40'
      - name: If release, verify version is provided
        if: inputs.is_release && inputs.version == ''
        run: |
          echo "::error If releasing, must provide a version."
          exit 1
      - name: Validate host
        if: ${{ inputs.test_input != '' && fromJSON(inputs.test_input).NCBCCCSTR == ''}}
        run: |
          echo "::error must provide NCBCCCSTR."
          exit 1
      - name: Validate user
        if: ${{ inputs.test_input != '' && fromJSON(inputs.test_input).NCBCCUSERNAME == '' }}
        run: |
          echo "::error must provide NCBCCUSERNAME."
          exit 1
      - name: Validate password
        if: ${{ inputs.test_input != '' && fromJSON(inputs.test_input).NCBCCPASSWORD == '' }}
        run: |
          echo "::error must provide NCBCCPASSWORD."
          exit 1
      - name: Validate FQDN
        if: ${{ inputs.test_input != '' && fromJSON(inputs.test_input).NCBCCFQDN == '' }}
        run: |
          echo "::error must provide NCBCCFQDN."
          exit 1


  lint:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js ${{ env.DEFAULT_NODE }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.DEFAULT_NODE }}
      - name: Confirm Node version
        run: node --version
      - name: Install dependencies
        run: |
          npm ci --ignore-scripts
      - name: Run lint
        run: npm run lint
      - name: Check deps
        if: inputs.is_release || inputs.version != ''
        run:
          npm run check-deps
          npm audit  --omit=dev


  build-prebuilds:
    needs: lint
    if: ${{ inputs.prebuilds_run_id == '' }}
    uses: ./.github/workflows/prebuilds.yml
    with:
      is_release: ${{ inputs.is_release && inputs.is_release || false }}
      sha: ${{ inputs.sha && inputs.sha || '' }}
      version: ${{ inputs.version && inputs.version || '' }}
      cxx_change: ${{ inputs.cxx_change && inputs.cxx_change || '' }}


  test-setup:
    runs-on: ubuntu-22.04
    needs: [validate-input, lint, build-prebuilds]
    if: |
      always()
      && needs.lint.result == 'success'
      && needs.validate-input.result == 'success'
      && (needs.build-prebuilds.result == 'success' || needs.build-prebuilds.result == 'skipped')
    steps:
      - name: Checkout (with SHA)
        if: inputs.sha != ''
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}
          fetch-depth: 0
          fetch-tags: true
      - name: Checkout (no SHA)
        if: inputs.sha == ''
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Setup test environment
        run: |
          mkdir ncbcc-test
          cp -r test ncbcc-test
          cp -r lib ncbcc-test
          cp -r scripts ncbcc-test
          cp package-lock.json ncbcc-test
          cp package.json ncbcc-test
          cp tsconfig.json ncbcc-test
      - name: Build testConfig.ini
        if: ${{ inputs.test_input != '' }}
        run: |
          export $(echo '${{ inputs.test_input }}' | jq -r '. | to_entries[] | join("=")')
          echo "Output environment"
          env | grep NCBCC
          cat > testConfig.ini <<EOF
          connstr = $NCBCCCSTR
          username = $NCBCCUSERNAME
          password = $NCBCCPASSWORD
          nonprod = $NCBCCNONPROD
          fqdn = $NCBCCFQDN
          EOF
          echo "Output testConfig.ini"
          cat testConfig.ini
          mv testConfig.ini ncbcc-test/test
          echo "ncbcc-test/test contents"
          ls -alh ncbcc-test/test
      - name: Build default testConfig.ini
        if: ${{ inputs.test_input == '' }}
        run: |
          cat > testConfig.ini <<EOF
          username = Administrator
          password = password
          nonprod = True
          fqdn = travel-sample.inventory.fqdn
          EOF
          echo "Output testConfig.ini"
          cat testConfig.ini
          mv testConfig.ini ncbcc-test/test
          echo "ncbcc-test/test contents"
          ls -alh ncbcc-test/test
      - name: Upload test setup
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: ncbcc-test-setup
          path: |
            ncbcc-test/


  tests-linux:
    runs-on: ubuntu-22.04
    needs: [validate-input, build-prebuilds, test-setup]
    if: |
      always()
      && needs.validate-input.result == 'success'
      && needs.test-setup.result == 'success'
      && (needs.build-prebuilds.result == 'success' || needs.build-prebuilds.result == 'skipped')
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-22.04']
        node-version: ["18", "20"]
        arch: ['x86_64', 'arm64']
    steps:
      - name: Set up QEMU
        if: ${{ matrix.arch == 'arm64' }}
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - uses: actions/download-artifact@v4
        with:
          name: ncbcc-test-setup
      - name: Setup prebuild npmrc
        run: |
          mkdir -p prebuilds
          echo "columnar_local_prebuilds=./prebuilds" >> .npmrc
      - name: Download prebuild
        uses: actions/download-artifact@v4
        with:
          name: ncbcc-artifact-linux-${{ matrix.arch }}-prebuild
          run-id: ${{ inputs.prebuilds_run_id != '' && inputs.prebuilds_run_id || needs.build-prebuilds.outputs.workflow_run_id }}
          github-token: ${{ github.token }}
          path: prebuilds
      - name: Run in docker
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrix.node-version }}-bullseye-slim
          options: >-
            --platform linux/${{ matrix.arch == 'x86_64' && 'amd64' || 'arm64'}}
            -v ${{ github.workspace }}:/work
          run: |
            node --version
            cd /work
            ls -alh
            npm ci --ignore-scripts
            npm run install
            npm run prepack
            npx ts-mocha test/connspec.test.* test/query.test.*

  tests-alpine-linux:
    runs-on: ubuntu-22.04
    needs: [validate-input, build-prebuilds, test-setup]
    if: |
      always()
      && needs.validate-input.result == 'success'
      && needs.test-setup.result == 'success'
      && (needs.build-prebuilds.result == 'success' || needs.build-prebuilds.result == 'skipped')
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-22.04']
        node-version: ["18", "20"]
        arch: ['x86_64', 'arm64']
    steps:
      - name: Set up QEMU
        if: ${{ matrix.arch == 'arm64' }}
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - uses: actions/download-artifact@v4
        with:
          name: ncbcc-test-setup
      - name: Setup prebuild npmrc
        run: |
          mkdir -p prebuilds
          echo "columnar_local_prebuilds=./prebuilds" >> .npmrc
      - name: Download prebuild
        uses: actions/download-artifact@v4
        with:
          name: ncbcc-artifact-linuxmusl-${{ matrix.arch }}-prebuild
          run-id: ${{ inputs.prebuilds_run_id != '' && inputs.prebuilds_run_id || needs.build-prebuilds.outputs.workflow_run_id }}
          github-token: ${{ github.token }}
          path: prebuilds
      - name: Run in docker
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrix.node-version }}-alpine
          options: >-
            --platform linux/${{ matrix.arch == 'x86_64' && 'amd64' || 'arm64'}}
            -v ${{ github.workspace }}:/work
          run: |
            node --version
            cd /work
            ls -alh
            npm ci --ignore-scripts
            npm run install
            npm run prepack
            npx ts-mocha test/connspec.test.* test/query.test.*

  tests-macos:
    needs: [validate-input, build-prebuilds, test-setup]
    if: |
      always()
      && needs.validate-input.result == 'success'
      && needs.test-setup.result == 'success'
      && (needs.build-prebuilds.result == 'success' || needs.build-prebuilds.result == 'skipped')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["macos-13", "macos-14"]
        node-version: ["18", "20"]
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Confirm Node version
        run: |
          node --version
          node -p "process.arch"
      - uses: actions/download-artifact@v4
        with:
          name: ncbcc-test-setup
      - name: Setup prebuild npmrc
        run: |
          mkdir -p prebuilds
          echo "columnar_local_prebuilds=./prebuilds" >> .npmrc
      - name: Download prebuild
        uses: actions/download-artifact@v4
        with:
          name: ncbcc-artifact-macos-${{ matrix.os == 'macos-14' && 'arm64' || 'x86_64' }}-prebuild
          run-id: ${{ inputs.prebuilds_run_id != '' && inputs.prebuilds_run_id || needs.build-prebuilds.outputs.workflow_run_id }}
          github-token: ${{ github.token }}
          path: prebuilds
      - name: Run tests
        run: |
          node --version
          ls -alh
          npm ci --ignore-scripts
          npm run install
          npm run prepack
          npx ts-mocha test/connspec.test.* test/query.test.*

  tests-windows:
    needs: [validate-input, build-prebuilds, test-setup]
    if: |
      always()
      && needs.validate-input.result == 'success'
      && needs.test-setup.result == 'success'
      && (needs.build-prebuilds.result == 'success' || needs.build-prebuilds.result == 'skipped')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["windows-latest"]
        node-version: ["18", "20"]
        arch: ["x86_64"]
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Confirm Node version
        run: |
          node --version
          node -p "process.arch"
      - uses: actions/download-artifact@v4
        with:
          name: ncbcc-test-setup
      - name: Setup prebuild npmrc
        shell: cmd
        run: |
          md prebuilds
          echo columnar_local_prebuilds=${{ github.workspace }}\prebuilds >> .npmrc
          type .npmrc
      - name: Download prebuild
        uses: actions/download-artifact@v4
        with:
          name: ncbcc-artifact-windows-${{ matrix.arch }}-prebuild
          run-id: ${{ inputs.prebuilds_run_id != '' && inputs.prebuilds_run_id || needs.build-prebuilds.outputs.workflow_run_id }}
          github-token: ${{ github.token }}
          path: prebuilds
      - name: Run tests
        shell: pwsh
        run: |
          node --version
          gci
          npm ci --ignore-scripts
          npm run install
          npm run prepack
          npx ts-mocha test/connspec.test.* test/query.test.*
          
