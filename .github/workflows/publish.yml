name: publish

on:
  workflow_dispatch:
    inputs:
      sha:
        description: "The git SHA to use for release.  Only set if needing to publish"
        required: true
        default: ""
        type: string
      version:
        description: "The Release version.  Allowed format: x.y.z"
        required: true
        default: ""
        type: string
      publish_dryrun:
        description: "Set to true to in order to do a npm publish dry run."
        required: false
        default: true
        type: boolean
      npm_tag:
        description: "The tag value to use to publish to npm."
        required: false
        default: ""
        type: choice
        options:
        - ''
        - dev
        - beta
        - rc
      prebuilds_run_id:
        description: "The workflow run ID of a prebuilds workflow run.  Set if wanting to use prebuilds from an already completed run."
        required: false
        default: ""
        type: string
      test_input:
        description: "JSON formatted object representing test input."
        required: false
        default: ""
        type: string
      publish_input:
        description: "JSON formatted object representing publish options."
        required: false
        default: "{\"PUBLISH_NPM\": true, \"PUBLISH_API_DOCS\": true, \"SKIP_TESTS\": false}"
        type: string

env:
  DEFAULT_NODE: "18"

jobs:
  validate-input:
    runs-on: ubuntu-22.04
    steps:
      - name: Verify SHA is provided
        if: inputs.sha == ''
        run: |
          echo "::error Must provide a SHA."
          exit 1
      - name: Verify SHA is correct length
        if: inputs.sha != ''
        run: |
          echo '"${{ inputs.sha }}"' | jq -e '. | length == 40'
      - name: Verify version is provided
        if: inputs.version == ''
        run: |
          echo "::error Must provide a version."
          exit 1


  output-publish-params:
    runs-on: ubuntu-22.04
    needs: validate-input
    outputs:
      publish_npm: ${{ steps.output-publish-params.outputs.publish_npm }}
      publish_api_docs: ${{ steps.output-publish-params.outputs.publish_api_docs }}
      skip_tests: ${{ steps.output-publish-params.outputs.skip_tests }}
    steps:
      - name: Output Publish parameters
        id: output-publish-params
        run: |
          export $(echo '${{ inputs.publish_input }}' | jq -r '. | to_entries[] | join("=")')
          echo "PUBLISH_NPM=$PUBLISH_NPM"
          echo "PUBLISH_API_DOCS=$PUBLISH_API_DOCS"
          echo "SKIP_TESTS=$SKIP_TESTS"
          echo "publish_npm=$PUBLISH_NPM" >> $GITHUB_OUTPUT
          echo "publish_api_docs=$PUBLISH_API_DOCS" >> $GITHUB_OUTPUT
          echo "skip_tests=$SKIP_TESTS" >> $GITHUB_OUTPUT


  build-prebuilds:
    if: ${{ inputs.prebuilds_run_id == '' }}
    needs: validate-input
    uses: ./.github/workflows/prebuilds.yml
    with:
      is_release: true
      sha: ${{ inputs.sha && inputs.sha || '' }}
      version: ${{ inputs.version && inputs.version || '' }}
      cxx_change: ${{ inputs.cxx_change && inputs.cxx_change || '' }}


  set-prebuilds-run-id:
    runs-on: ubuntu-22.04
    needs: build-prebuilds
    outputs:
      prebuilds_run_id: ${{ inputs.prebuilds_run_id == '' && steps.save_prebuilds_run_id.outputs.prebuilds_run_id || inputs.prebuilds_run_id }}
    if: |
      always()
      && (needs.build-prebuilds.result == 'success' || needs.build-prebuilds.result == 'skipped')
    steps:
      - name: Save prebuilds_run_id
        if: ${{ inputs.prebuilds_run_id == '' }}
        id: save_prebuilds_run_id
        run: |
          echo "prebuilds_run_id=${{ needs.build-prebuilds.outputs.workflow_run_id }}" >> $GITHUB_OUTPUT


  tests:
    needs: [build-prebuilds, set-prebuilds-run-id, output-publish-params]
    if: |
      always()
      && (needs.build-prebuilds.result == 'success' || needs.build-prebuilds.result == 'skipped')
      && needs.set-prebuilds-run-id.result == 'success'
      && needs.output-publish-params.result == 'success'
      && needs.output-publish-params.outputs.skip_tests == 'false'
    uses: ./.github/workflows/tests.yml
    with:
      is_release: true
      sha: ${{ inputs.sha && inputs.sha || '' }}
      version: ${{ inputs.version && inputs.version || '' }}
      cxx_change: ${{ inputs.cxx_change && inputs.cxx_change || '' }}
      prebuilds_run_id: ${{ needs.set-prebuilds-run-id.outputs.prebuilds_run_id }}
      test_input: ${{ inputs.test_input && inputs.test_input || '' }}


  upload-api-docs:
    name: Upload API docs as artifact
    needs: [build-prebuilds, tests]
    if: |
      always()
      && (needs.build-prebuilds.result == 'success' || needs.build-prebuilds.result == 'skipped')
      && (needs.tests.result == 'success' || needs.tests.result == 'skipped')
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        if: inputs.sha != ''
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.DEFAULT_NODE }}
      - name: Confirm Node version
        run: |
          node --version
          node -p "process.arch"
      - name: Install dependencies
        run: |
          npm ci --ignore-scripts
          mkdir -p build/Release
      - uses: actions/download-artifact@v4
        if: ${{ inputs.prebuilds_run_id == '' }}
        with:
          name: ncbcc-artifact-linux-x86_64-prebuild
          path: build/Release
          run-id: ${{ needs.build-prebuilds.outputs.workflow_run_id }}
          github-token: ${{ github.token }}
      - uses: actions/download-artifact@v4
        if: ${{ inputs.prebuilds_run_id != '' }}
        with:
          name: ncbcc-artifact-linux-x86_64-prebuild
          path: build/Release
          run-id: ${{ inputs.prebuilds_run_id }}
          github-token: ${{ github.token }}
      - name: Build docs
        run: |
          ls -alh
          ls -alh build/Release
          npm run build-docs
          ls -alh docs
      - name: Upload Node.js API docs as artifact
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: ncbcc-api-docs
          path: docs/


  publish-npm:
    name: Publish SDK to npm (prebuilds already built)
    needs: [build-prebuilds, tests, output-publish-params]
    if: |
      always()
      && (needs.build-prebuilds.result == 'success' || needs.build-prebuilds.result == 'skipped')
      && (needs.tests.result == 'success' || needs.tests.result == 'skipped')
      && needs.output-publish-params.result == 'success'
      && needs.output-publish-params.outputs.publish_npm == 'true'
    runs-on: ubuntu-22.04
    environment: publish
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        if: ${{ inputs.prebuilds_run_id == '' }}
        with:
          name: ncbcc-sdist
          run-id: ${{ needs.build-prebuilds.outputs.workflow_run_id }}
          github-token: ${{ github.token }}
      - uses: actions/download-artifact@v4
        if: ${{ inputs.prebuilds_run_id != '' }}
        with:
          name: ncbcc-sdist
          run-id: ${{ inputs.prebuilds_run_id }}
          github-token: ${{ github.token }}
      - name: Extract sdist source
        run: |
          ls -alh
          SDIST=$(find . -name '*.tgz' | cut -c 3-)
          tar -xvzf $SDIST
          cp -r package/** .
          rm -rf package
      - uses: actions/download-artifact@v4
        if: ${{ inputs.prebuilds_run_id == '' }}
        with:
          name: ncbcc-lib
          run-id: ${{ needs.build-prebuilds.outputs.workflow_run_id }}
          github-token: ${{ github.token }}
      - uses: actions/download-artifact@v4
        if: ${{ inputs.prebuilds_run_id != '' }}
        with:
          name: ncbcc-lib
          run-id: ${{ inputs.prebuilds_run_id }}
          github-token: ${{ github.token }}
      - uses: actions/download-artifact@v4
        if: ${{ inputs.prebuilds_run_id == '' }}
        with:
          pattern: ncbcc-artifact-*
          path: prebuilds
          merge-multiple: true
          run-id: ${{ needs.build-prebuilds.outputs.workflow_run_id }}
          github-token: ${{ github.token }}
      - uses: actions/download-artifact@v4
        if: ${{ inputs.prebuilds_run_id != '' }}
        with:
          pattern: ncbcc-artifact-*
          path: prebuilds
          merge-multiple: true
          run-id: ${{ inputs.prebuilds_run_id }}
          github-token: ${{ github.token }}
      - uses: actions/download-artifact@v4
        if: ${{ inputs.prebuilds_run_id == '' }}
        with:
          name: ncbcc-platform-packagejson
          run-id: ${{ needs.build-prebuilds.outputs.workflow_run_id }}
          github-token: ${{ github.token }}
      - uses: actions/download-artifact@v4
        if: ${{ inputs.prebuilds_run_id != '' }}
        with:
          name: ncbcc-platform-packagejson
          run-id: ${{ inputs.prebuilds_run_id }}
          github-token: ${{ github.token }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.DEFAULT_NODE }}
          registry-url: 'https://registry.npmjs.org'
      - name: Confirm Node version
        run: |
          node --version
          node -p "process.arch"
      - name: Build platform packages
        run: |
          ls -alh prebuilds
          curl -o platformPackages.js ${CI_SCRIPTS_URL}/ci_scripts/platformPackages.js
          node platformPackages.js --build-platform-packages --d ${{ github.workspace }}/prebuilds
          rm platPkg.json
          ls -alh prebuilds
          cat package.json
        env:
          CI_SCRIPTS_URL: "https://raw.githubusercontent.com/couchbaselabs/sdkbuild-jenkinsfiles/master/couchnode"
      - name: Create sdist artifact
        run: |
          npm install --ignore-scripts
          mkdir sdist
          npm pack --pack-destination sdist
      - name: Publish to npm
        run: |
          env
          rm -rf sdist
          curl -o publish_to_npm.sh ${CI_SCRIPTS_URL}/ci_scripts/publish_to_npm.sh
          chmod 755 publish_to_npm.sh
          ./publish_to_npm.sh ${{ github.workspace }} ${{ github.workspace }}/prebuilds
        env:
          CI_SCRIPTS_URL: "https://raw.githubusercontent.com/couchbaselabs/sdkbuild-jenkinsfiles/master/couchnode"
          PUBLISH_DRY_RUN: "${{ inputs.publish_dryrun }}"
          NPM_TAG: ${{ inputs.npm_tag }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}


  validate-npm:
    name: Validate SDK on npm
    needs: [publish-npm]
    if: |
      always()
      && needs.publish-npm.result == 'success'
      && needs.publish-npm.result != 'skipped'
    uses: ./.github/workflows/verify_release.yml
    with:
      version: ${{ inputs.version }}
      npm_tag: ${{ inputs.npm_tag }}
      test_input: ${{ inputs.test_input }}


  publish-api-docs:
    name: Publish SDK API docs
    needs: [upload-api-docs, tests, output-publish-params, validate-npm]
    environment: publish
    permissions:
      id-token: write
      contents: read
    if: |
      always()
      && (needs.build-prebuilds.result == 'success' || needs.build-prebuilds.result == 'skipped')
      && (needs.tests.result == 'success' || needs.tests.result == 'skipped')
      && (needs.validate-npm.result == 'success' || needs.validate-npm.result == 'skipped')
      && needs.output-publish-params.result == 'success'
      && needs.output-publish-params.outputs.publish_api_docs == 'true'
    runs-on: ubuntu-22.04
    steps:
      - name: Download API docs
        uses: actions/download-artifact@v4
        with:
          name: ncbcc-api-docs
          path: docs
      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::786014483886:role/SDK_GHA
          aws-region: us-west-1
      - name: Download API docs
        uses: actions/download-artifact@v4
        with:
          name: ncbcc-api-docs
          path: docs
      - name: Upload to S3
        run: |
          ls -alh ./docs
          aws s3 cp ./docs s3://docs.couchbase.com/sdk-api/columnar-nodejs-client-$SDK_VERSION/ --recursive --acl public-read
        env:
          SDK_VERSION: ${{ inputs.version }}

