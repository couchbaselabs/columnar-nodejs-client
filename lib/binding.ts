/*
 *  Copyright 2016-2024. Couchbase, Inc.
 *  All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/*
eslint
jsdoc/require-jsdoc: off,
@typescript-eslint/no-empty-interface: off
*/
import path from 'path'

// TODO(Brett19): Check which of these is actually needed...
export type CppMilliseconds = number
export type CppSeconds = number
export type CppBytes = string | Buffer
export type CppDocFlags = number
export type CppExpiry = number

export type CppJsonString = string | Buffer

export interface CppClusterCredentials {
  username?: string
  password?: string
  certificate_path?: string
  key_path?: string
  allowed_sasl_mechanisms?: string[]
}

export interface CppClusterSecurityOptions {
  trustOnlyCapella?: boolean
  trustOnlyPemFile?: string
  trustOnlyPemString?: string
  trustOnlyPlatform?: boolean
  trustOnlyCertificates?: string[]
  cipherSuites?: string[]
}

export interface CppDnsConfig {
  nameserver?: string
  port?: number
  dnsSrvTimeout?: number
}

export interface CppColumnarQueryResult {
  nextRow(callback: (row: string, err: CppColumnarError | null) => void): void
  cancel(): boolean
  metadata(): CppColumnarQueryMetadata | undefined
}

//#region Autogenerated Bindings

export enum CppRetryReason {}
export enum CppColumnarQueryScanConsistency {}
export enum CppColumnarErrc {}

export interface CppColumnarQueryOptions {
  statement: string
  database_name?: string
  scope_name?: string
  priority?: boolean
  positional_parameters: CppJsonString[]
  named_parameters: { [key: string /*string*/]: CppJsonString }
  read_only?: boolean
  scan_consistency?: CppColumnarQueryScanConsistency
  raw: { [key: string /*string*/]: CppJsonString }
  timeout?: CppMilliseconds
}
export interface CppColumnarQueryWarning {
  code: number
  message: string
}
export interface CppColumnarQueryMetrics {
  elapsed_time: CppMilliseconds
  execution_time: CppMilliseconds
  result_count: number
  result_size: number
  processed_objects: number
}
export interface CppColumnarQueryMetadata {
  request_id: string
  warnings: CppColumnarQueryWarning[]
  metrics: CppColumnarQueryMetrics
}
export interface CppColumnarQueryErrorProperties {
  code: number
  server_message: string
}

export interface CppConnectionAutogen {}

export interface CppBindingAutogen {
  retry_reason: {
    do_not_retry: CppRetryReason
    unknown: CppRetryReason
    socket_not_available: CppRetryReason
    service_not_available: CppRetryReason
    node_not_available: CppRetryReason
    key_value_not_my_vbucket: CppRetryReason
    key_value_collection_outdated: CppRetryReason
    key_value_error_map_retry_indicated: CppRetryReason
    key_value_locked: CppRetryReason
    key_value_temporary_failure: CppRetryReason
    key_value_sync_write_in_progress: CppRetryReason
    key_value_sync_write_re_commit_in_progress: CppRetryReason
    service_response_code_indicated: CppRetryReason
    socket_closed_while_in_flight: CppRetryReason
    circuit_breaker_open: CppRetryReason
    query_prepared_statement_failure: CppRetryReason
    query_index_not_found: CppRetryReason
    analytics_temporary_failure: CppRetryReason
    search_too_many_requests: CppRetryReason
    views_temporary_failure: CppRetryReason
    views_no_active_partition: CppRetryReason
  }
  columnar_query_scan_consistency: {
    not_bounded: CppColumnarQueryScanConsistency
    request_plus: CppColumnarQueryScanConsistency
  }
  columnar_errc: {
    generic: CppColumnarErrc
    invalid_credential: CppColumnarErrc
    timeout: CppColumnarErrc
    query_error: CppColumnarErrc
  }
}

//#endregion Autogenerated Bindings

export type CppErrc = CppColumnarErrc

// This type intentionally does not inherit from Error so that it will
// not be trivially castable to error and forces us to convert the errors.
export interface CppErrorBase {
  code: CppErrc
}

export interface CppColumnarError extends CppErrorBase {
  message: string
  ctx: string
  message_and_ctx: string
  query_error_properties?: CppColumnarQueryErrorProperties
  cause?: CppColumnarError
}

export interface CppConnection extends CppConnectionAutogen {
  connect(
    connStr: string,
    credentials: CppClusterCredentials,
    securityOptions: CppClusterSecurityOptions,
    dnsOptions: CppDnsConfig | null
  ): void

  shutdown(callback: () => void): void

  query(
    options: CppColumnarQueryOptions,
    callback: (err: CppColumnarError | null) => void
  ): {
    cppQueryErr: CppColumnarError | null
    cppQueryResult: CppColumnarQueryResult
  }
}

export interface CppBinding extends CppBindingAutogen {
  cbppVersion: string
  cbppMetadata: string
  enableProtocolLogger: (filename: string) => void
  shutdownLogger: () => void

  Connection: {
    new (): CppConnection
  }
}

// CN_PREBUILD_PATH_OVERRIDE is meant to help for webpack scenarios.  Webpack's EnvironmentPlugin
// can be used to set the path of the desired prebuild which will allow the node-loader package
// to pull in the corresponding prebuild.
const binding: CppBinding = process.env.CN_PREBUILD_PATH_OVERRIDE
  ? // eslint-disable-next-line @typescript-eslint/no-var-requires
    require(process.env.CN_PREBUILD_PATH_OVERRIDE)
  : // eslint-disable-next-line @typescript-eslint/no-var-requires
    require('../scripts/prebuilds').loadPrebuild(path.resolve(__dirname, '..'))
export default binding
