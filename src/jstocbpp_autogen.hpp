/*
 *  Copyright 2016-2024. Couchbase, Inc.
 *  All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

#pragma once
#include "jstocbpp_defs.hpp"

#include "jstocbpp_basic.hpp"
#include "jstocbpp_cpptypes.hpp"

#include <core/cluster.hxx>
#include <core/columnar/agent_config.hxx>
#include <core/columnar/query_options.hxx>
#include <core/operations/document_analytics.hxx>
#include <core/operations/management/analytics.hxx>
#include <core/operations/management/freeform.hxx>

namespace couchnode
{

// #region Autogenerated Marshalling

template<>
struct js_to_cbpp_t<couchbase::core::columnar::timeout_config> {
  static inline couchbase::core::columnar::timeout_config from_js(Napi::Value jsVal)
  {
    auto jsObj = jsVal.ToObject();
    couchbase::core::columnar::timeout_config cppObj;
    js_to_cbpp<std::chrono::milliseconds>(cppObj.connect_timeout, jsObj.Get("connect_timeout"));
    js_to_cbpp<std::chrono::milliseconds>(cppObj.dispatch_timeout, jsObj.Get("dispatch_timeout"));
    js_to_cbpp<std::chrono::milliseconds>(cppObj.query_timeout, jsObj.Get("query_timeout"));
    js_to_cbpp<std::chrono::milliseconds>(cppObj.management_timeout,
                                          jsObj.Get("management_timeout"));
    return cppObj;
  }
  static inline Napi::Value to_js(Napi::Env env,
                                  const couchbase::core::columnar::timeout_config& cppObj)
  {
    auto resObj = Napi::Object::New(env);
    resObj.Set("connect_timeout",
               cbpp_to_js<std::chrono::milliseconds>(env, cppObj.connect_timeout));
    resObj.Set("dispatch_timeout",
               cbpp_to_js<std::chrono::milliseconds>(env, cppObj.dispatch_timeout));
    resObj.Set("query_timeout", cbpp_to_js<std::chrono::milliseconds>(env, cppObj.query_timeout));
    resObj.Set("management_timeout",
               cbpp_to_js<std::chrono::milliseconds>(env, cppObj.management_timeout));
    return resObj;
  }
};

template<>
struct js_to_cbpp_t<couchbase::core::columnar::query_options> {
  static inline couchbase::core::columnar::query_options from_js(Napi::Value jsVal)
  {
    auto jsObj = jsVal.ToObject();
    couchbase::core::columnar::query_options cppObj;
    js_to_cbpp<std::string>(cppObj.statement, jsObj.Get("statement"));
    js_to_cbpp<std::optional<std::string>>(cppObj.database_name, jsObj.Get("database_name"));
    js_to_cbpp<std::optional<std::string>>(cppObj.scope_name, jsObj.Get("scope_name"));
    js_to_cbpp<std::optional<bool>>(cppObj.priority, jsObj.Get("priority"));
    js_to_cbpp<std::vector<couchbase::core::json_string>>(cppObj.positional_parameters,
                                                          jsObj.Get("positional_parameters"));
    js_to_cbpp<std::map<std::string, couchbase::core::json_string>>(cppObj.named_parameters,
                                                                    jsObj.Get("named_parameters"));
    js_to_cbpp<std::optional<bool>>(cppObj.read_only, jsObj.Get("read_only"));
    js_to_cbpp<std::optional<couchbase::core::columnar::query_scan_consistency>>(
      cppObj.scan_consistency, jsObj.Get("scan_consistency"));
    js_to_cbpp<std::map<std::string, couchbase::core::json_string>>(cppObj.raw, jsObj.Get("raw"));
    js_to_cbpp<std::optional<std::chrono::milliseconds>>(cppObj.timeout, jsObj.Get("timeout"));
    return cppObj;
  }
  static inline Napi::Value to_js(Napi::Env env,
                                  const couchbase::core::columnar::query_options& cppObj)
  {
    auto resObj = Napi::Object::New(env);
    resObj.Set("statement", cbpp_to_js<std::string>(env, cppObj.statement));
    resObj.Set("database_name", cbpp_to_js<std::optional<std::string>>(env, cppObj.database_name));
    resObj.Set("scope_name", cbpp_to_js<std::optional<std::string>>(env, cppObj.scope_name));
    resObj.Set("priority", cbpp_to_js<std::optional<bool>>(env, cppObj.priority));
    resObj.Set(
      "positional_parameters",
      cbpp_to_js<std::vector<couchbase::core::json_string>>(env, cppObj.positional_parameters));
    resObj.Set("named_parameters",
               cbpp_to_js<std::map<std::string, couchbase::core::json_string>>(
                 env, cppObj.named_parameters));
    resObj.Set("read_only", cbpp_to_js<std::optional<bool>>(env, cppObj.read_only));
    resObj.Set("scan_consistency",
               cbpp_to_js<std::optional<couchbase::core::columnar::query_scan_consistency>>(
                 env, cppObj.scan_consistency));
    resObj.Set("raw",
               cbpp_to_js<std::map<std::string, couchbase::core::json_string>>(env, cppObj.raw));
    resObj.Set("timeout",
               cbpp_to_js<std::optional<std::chrono::milliseconds>>(env, cppObj.timeout));
    return resObj;
  }
};

template<>
struct js_to_cbpp_t<couchbase::core::columnar::query_warning> {
  static inline couchbase::core::columnar::query_warning from_js(Napi::Value jsVal)
  {
    auto jsObj = jsVal.ToObject();
    couchbase::core::columnar::query_warning cppObj;
    js_to_cbpp<std::int32_t>(cppObj.code, jsObj.Get("code"));
    js_to_cbpp<std::string>(cppObj.message, jsObj.Get("message"));
    return cppObj;
  }
  static inline Napi::Value to_js(Napi::Env env,
                                  const couchbase::core::columnar::query_warning& cppObj)
  {
    auto resObj = Napi::Object::New(env);
    resObj.Set("code", cbpp_to_js<std::int32_t>(env, cppObj.code));
    resObj.Set("message", cbpp_to_js<std::string>(env, cppObj.message));
    return resObj;
  }
};

template<>
struct js_to_cbpp_t<couchbase::core::columnar::query_metrics> {
  static inline couchbase::core::columnar::query_metrics from_js(Napi::Value jsVal)
  {
    auto jsObj = jsVal.ToObject();
    couchbase::core::columnar::query_metrics cppObj;
    js_to_cbpp<std::chrono::nanoseconds>(cppObj.elapsed_time, jsObj.Get("elapsed_time"));
    js_to_cbpp<std::chrono::nanoseconds>(cppObj.execution_time, jsObj.Get("execution_time"));
    js_to_cbpp<std::uint64_t>(cppObj.result_count, jsObj.Get("result_count"));
    js_to_cbpp<std::uint64_t>(cppObj.result_size, jsObj.Get("result_size"));
    js_to_cbpp<std::uint64_t>(cppObj.processed_objects, jsObj.Get("processed_objects"));
    return cppObj;
  }
  static inline Napi::Value to_js(Napi::Env env,
                                  const couchbase::core::columnar::query_metrics& cppObj)
  {
    auto resObj = Napi::Object::New(env);
    resObj.Set("elapsed_time", cbpp_to_js<std::chrono::nanoseconds>(env, cppObj.elapsed_time));
    resObj.Set("execution_time", cbpp_to_js<std::chrono::nanoseconds>(env, cppObj.execution_time));
    resObj.Set("result_count", cbpp_to_js<std::uint64_t>(env, cppObj.result_count));
    resObj.Set("result_size", cbpp_to_js<std::uint64_t>(env, cppObj.result_size));
    resObj.Set("processed_objects", cbpp_to_js<std::uint64_t>(env, cppObj.processed_objects));
    return resObj;
  }
};

template<>
struct js_to_cbpp_t<couchbase::core::columnar::query_metadata> {
  static inline couchbase::core::columnar::query_metadata from_js(Napi::Value jsVal)
  {
    auto jsObj = jsVal.ToObject();
    couchbase::core::columnar::query_metadata cppObj;
    js_to_cbpp<std::string>(cppObj.request_id, jsObj.Get("request_id"));
    js_to_cbpp<std::vector<couchbase::core::columnar::query_warning>>(cppObj.warnings,
                                                                      jsObj.Get("warnings"));
    js_to_cbpp<couchbase::core::columnar::query_metrics>(cppObj.metrics, jsObj.Get("metrics"));
    return cppObj;
  }
  static inline Napi::Value to_js(Napi::Env env,
                                  const couchbase::core::columnar::query_metadata& cppObj)
  {
    auto resObj = Napi::Object::New(env);
    resObj.Set("request_id", cbpp_to_js<std::string>(env, cppObj.request_id));
    resObj.Set(
      "warnings",
      cbpp_to_js<std::vector<couchbase::core::columnar::query_warning>>(env, cppObj.warnings));
    resObj.Set("metrics",
               cbpp_to_js<couchbase::core::columnar::query_metrics>(env, cppObj.metrics));
    return resObj;
  }
};

template<>
struct js_to_cbpp_t<couchbase::core::columnar::query_error_properties> {
  static inline couchbase::core::columnar::query_error_properties from_js(Napi::Value jsVal)
  {
    auto jsObj = jsVal.ToObject();
    couchbase::core::columnar::query_error_properties cppObj;
    js_to_cbpp<std::int32_t>(cppObj.code, jsObj.Get("code"));
    js_to_cbpp<std::string>(cppObj.server_message, jsObj.Get("server_message"));
    return cppObj;
  }
  static inline Napi::Value to_js(Napi::Env env,
                                  const couchbase::core::columnar::query_error_properties& cppObj)
  {
    auto resObj = Napi::Object::New(env);
    resObj.Set("code", cbpp_to_js<std::int32_t>(env, cppObj.code));
    resObj.Set("server_message", cbpp_to_js<std::string>(env, cppObj.server_message));
    return resObj;
  }
};

// #endregion Autogenerated Marshalling

} // namespace couchnode
